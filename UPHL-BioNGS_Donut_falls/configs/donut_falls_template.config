//# Docker Params -------------------------------------------
//docker.enabled                    = true
//docker.runOptions                 = '-u \$(id -u):\$(id -g)'
//docker.sudo                       = false
//docker.temp                       = /tmp
//docker.remove                     = true
//docker.registry                   = ''
//docker.fixOwnership               = true
//docker.engineOptions              = ''
//docker.mountFlags                 = ''

//# Singularity Params --------------------------------------
//singularity.enabled               = true
//singularity.autoMounts            = true
//singularity.runOptions            = ""
//process.stageInMode               = "link"
//singularity.engineOptions         = ''
//singularity.cacheDir              = ''

//# AWS Batch Params ----------------------------------------
//process.executor                  = 'awsbatch'
//process.queue                     = ''
//aws.batch.cliPath                 = '/home/ec2-user/miniconda/bin/aws'
//aws.region                        = 'us-east-1'
//workDir                           = 's3://'

//# Google Cloud Params -------------------------------------
//process.executor                  = ''
//google.project                    = ''
//google.location                   = ''
//google.region                     = ''
//workDir                           = ''
//google.lifeSciences.bootDiskSize  = 50.GB

//# Nextflow Tower ------------------------------------------
//tower.accessToken                 = ''
//tower.enabled                     = true

//# Adjustable Workflow paramters ---------------------------
//# directory of ONT reads
//params.reads                      = 'reads'
//# directory for publishdir
params.outdir                       = 'donut_falls'
//# sequencing summary file from ONT run
//params.sequencing_summary         = 'sequencing_summary.txt'
//# directory with illumina reads matching ONT reads
//params.illumina                   = 'illumina'
//# specifies assembler to use. Options are 'flye', 'miniasm', 'raven', and 'unicycler'
//params.assembler                  = 'flye'

//# Adjust if additional options in the processes are needed for end user purposes
//params.nanoplot_summary_options   = ''
//params.nanoplot_options           = ''
//params.nanoplot_illumina_options  = ''
//params.unicycler_options          = ''
//params.raven_options              = '--polishing-rounds 2'
//params.flye_options               = ''
//params.filtlong_options           = '--min_length 1000 --keep_percent 95'
//params.medaka_options             = ''
//params.polca_options              = ''
//params.fastp_options              = ''

//# Docker Images -------------------------------------------
nanoplot_container                  = 'staphb/nanoplot:latest'
flye_container                      = 'staphb/flye:2.9'
filtlong_container                  = 'staphb/filtlong:0.2.1'
miniasm_container                   = 'staphb/minipolish:0.1.3'
any2fasta_container                 = 'staphb/any2fasta:0.4.2'
htslib_container                    = 'staphb/htslib:1.15'
raven_container                     = 'staphb/raven:1.5.1'
medaka_container                    = 'ontresearch/medaka:v1.6.1'
fastp_container                     = 'staphb/fastp:0.23.2'
polca_container                     = 'staphb/masurca:4.0.8'
unicycler_container                 = 'staphb/unicycler:0.5.0'
circlator_container                 = 'quay.io/biocontainers/circlator-1.5.5--py_3'
//trycycler_container               = 'staphb/trycycler:latest'

//# Workflow paramters --------------------------------------

process {
  publishDir  = [ path: params.outdir, mode: 'copy' ]

  withName:'nanoplot.*'{
    container = nanoplot_container
  }
  withName:fastp{
    container = fastp_container
  }
  withName:filtlong{
    container = filtlong_container
  }
  withName:bgzip{
    container = htslib_container
  }
  withName:flye{
    container = flye_container
  }
  withName:miniasm{
    container = miniasm_container
  }
  withName:any2fasta{
    container = any2fasta_container
  }
  withName:raven{
    container = raven_container
  }
  withName:medaka{
    container = medaka_container
  }
  withName:circlator{
    container = circlator_container
  }
  withName:polca{
    container = polca_container
  }
  withName:unicycler{
    container = unicycler_container
  }
}
